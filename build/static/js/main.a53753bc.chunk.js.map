{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","Typography","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","TabsWrappedLabel","classes","React","useState","setValue","className","AppBar","position","Tabs","onChange","event","newValue","aria-label","Tab","label","wrapped","noValidate","autoComplete","TextField","variant","type","class","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAYA,SAASA,EAASC,GAAQ,IAChBC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADZ,YACsBJ,EADtB,8BAGvB,OACE,6CACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,2BAAsBJ,GACxBK,kBAAA,sBAAgCL,IAC5BC,GALN,aAOGF,IAAUC,GACT,cAACM,EAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACC,EAAA,EAAD,UAAaV,SAavB,SAASW,EAAUT,GACjB,MAAO,CACLI,GAAG,eAAD,OAAiBJ,GACnB,gBAAgB,oBAAhB,OAAqCA,IAIzC,IAAMU,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,WAI/B,SAASC,IACtB,IAAMC,EAAUV,IADyB,EAEfW,IAAMC,SAAS,OAFA,mBAElCvB,EAFkC,KAE3BwB,EAF2B,KAQzC,OACE,sBAAKC,UAAWJ,EAAQP,KAAxB,UACE,cAACY,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,CAAM5B,MAAOA,EAAO6B,SAPL,SAACC,EAAOC,GAC3BP,EAASO,IAMuCC,aAAW,6BAAvD,UACE,cAACC,EAAA,EAAD,aACEjC,MAAM,MACNkC,MAAM,SACNC,SAAO,GACHzB,EAAU,SAEhB,cAACuB,EAAA,EAAD,aAAKjC,MAAM,MAAMkC,MAAM,SAAYxB,EAAU,cAGjD,cAACb,EAAD,CAAUQ,GAAG,KAAKL,MAAOA,EAAOC,MAAM,MAAtC,SACA,uBAAMwB,UAAWJ,EAAQP,KAAMsB,YAAU,EAACC,aAAa,MAAvD,UACA,cAACC,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,aAAaK,QAAQ,WAD1D,IACsE,sBAGtE,cAACD,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,YAAYK,QAAQ,WAAW,sBAEpE,cAACD,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,eAAeK,QAAQ,WAAW,sBAEvE,cAACD,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,SAASK,QAAQ,WARtD,IAQkE,sBAElE,cAACD,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,WAAWM,KAAK,WAAWD,QAAQ,WACxE,sBACA,wBAAQlC,GAAG,MAAMmC,KAAK,SAASC,MAAM,kBAArC,yBAKA,cAAC5C,EAAD,CAAUQ,GAAI,KAAKL,MAAOA,EAAOC,MAAM,MAAvC,SACA,uBAAMwB,UAAWJ,EAAQP,KAAMsB,YAAU,EAACC,aAAa,MAAvD,UACA,cAACC,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,WAAWK,QAAQ,WAAW,sBAGnE,cAACD,EAAA,EAAD,CAAWjC,GAAG,iBAAiB6B,MAAM,WAAWM,KAAK,WAAWD,QAAQ,WACxE,sBACA,wBAAQlC,GAAG,MAAMmC,KAAK,SAASC,MAAM,kBAArC,2BClGN,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a53753bc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport \"./App.css\";\nimport { red } from '@material-ui/core/colors';\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`wrapped-tabpanel-${index}`}\n      aria-labelledby={`wrapped-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `wrapped-tab-${index}`,\n    'aria-controls': `wrapped-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function TabsWrappedLabel() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState('one');\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Tabs value={value} onChange={handleChange} aria-label=\"wrapped label tabs example\">\n          <Tab\n            value=\"one\"\n            label=\"Signup\"\n            wrapped\n            {...a11yProps('one')}\n          />\n          <Tab value=\"two\" label=\"LogIn\" {...a11yProps('two')} />\n        </Tabs>\n      </AppBar>\n      <TabPanel id=\"rt\" value={value} index=\"one\">\n      <form className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"outlined-basic\" label=\"First-Name\" variant=\"filled\" /> <p>\n\n      </p>\n      <TextField id=\"outlined-basic\" label=\"Last-Name\" variant=\"filled\" /><p>\n        </p> \n      <TextField id=\"outlined-basic\" label=\"Phone-Number\" variant=\"filled\" /><p>\n        </p> \n      <TextField id=\"outlined-basic\" label=\"E-mail\" variant=\"filled\" /> <p>\n        </p>\n      <TextField id=\"outlined-basic\" label=\"password\" type=\"password\" variant=\"filled\" />\n      <p></p>\n      <button id=\"btn\" type=\"button\" class=\"btn btn-success\">Signup</button>\n      \n      \n    </form>\n      </TabPanel>\n      <TabPanel id =\"rt\" value={value} index=\"two\">\n      <form className={classes.root} noValidate autoComplete=\"off\">\n      <TextField id=\"outlined-basic\" label=\"UserName\" variant=\"filled\" /><p>\n        </p>\n\n      <TextField id=\"outlined-basic\" label=\"password\" type=\"password\" variant=\"filled\" />\n      <p></p>\n      <button id=\"btn\" type=\"button\" class=\"btn btn-success\">Login</button>\n    </form>\n      </TabPanel>\n    </div>\n    \n  ); \n}\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}